xlab = "x",
type = "l",
col = "black",
ylim = c(min, max)
)
# DISEGNO VERTICE
points( Vx, Vy,
type = "p",
col = "red",
pch = 21,
bg = "red",
ylim = c(min, max)
)
# DISEGNO FUOCO
points( Fx, Fy,
type = "p",
col = "green",
pch = 21,
bg = "green"
)
# DISEGNO PARABOLA
curve( func,
main = "Parabola",
ylab = "y",
xlab = "x",
type = "l",
col = "black",
ylim = c(min, max)
)
source('C:/Users/Alessandro/Desktop/Software/Coding/Projects/R/Parables/Parables.R', echo=TRUE)
source('C:/Users/Alessandro/Desktop/Software/Coding/Projects/R/Parables/Parables.R', echo=TRUE)
source('C:/Users/Alessandro/Desktop/Software/Coding/Projects/R/Parables/Parables.R', echo=TRUE)
source('C:/Users/Alessandro/Desktop/Software/Coding/Projects/R/Parables/Parables.R', echo=TRUE)
# DISEGNO VERTICE
points( Vx, Vy,
type = "p",
col = "red",
pch = 21,
bg = "red",
ylim = c(min, max)
)
# DISEGNO FUOCO
points( Fx, Fy,
type = "p",
col = "green",
pch = 21,
bg = "green"
)
# DISEGNO DIRETTRICE
abline( h = dir,
col = "blue"
)
# DISEGNO ASSE DI SIMMETRIA
abline( v = Vx,
col = "orange"
)
# AGGIUNGO LEGENDA
legend(
"topright",
legend=c("Parabola" , "Vertice" , "Fuoco" , "Direttrice", "Asse"),
col=c("black", "red", "green", "blue", "orange"),
lty = 1:2,
cex=0.8
)
print(a);
print(b);
print(c);
print(Vx);
print(Vy);
print(Fx);
print(Fy);
source('C:/Users/Alessandro/Desktop/Software/Coding/Projects/R/Parables/Parables.R', echo=TRUE)
source('C:/Users/Alessandro/Desktop/Software/Coding/Projects/R/Parables/Parables.R', echo=TRUE)
# DISEGNO PARABOLA
curve( func,
from = min,
to = max,
main = "Parabola",
ylab = "y",
xlab = "x",
type = "l",
col = "black"
)
# DISEGNO VERTICE
points( Vx, Vy,
type = "p",
col = "red",
pch = 21,
bg = "red",
ylim = c(min, max)
)
# DISEGNO FUOCO
points( Fx, Fy,
type = "p",
col = "green",
pch = 21,
bg = "green"
)
# DISEGNO DIRETTRICE
abline( h = dir,
col = "blue"
)
# DISEGNO ASSE DI SIMMETRIA
abline( v = Vx,
col = "orange"
)
# AGGIUNGO LEGENDA
legend(
"topright",
legend=c("Parabola" , "Vertice" , "Fuoco" , "Direttrice", "Asse"),
col=c("black", "red", "green", "blue", "orange"),
lty = 1:2,
cex=0.8
)
print(a);
print(b);
delta = b * b - 4 * a * c;
# COORDINATE VERTICE
Vx = -1 * ( b / (2 * a));
Vy = -1 * ( delta / (4 * a));
# COORDINATE FUOCO
Fx = Vx;
Fy = ( 1 - delta ) / ( 4 * a );
# Y DIRETTRICE
dir = -1 * (( 1 + delta ) / ( 4 * a ));
func = function(x) {a*x*x + b*x + c};
# DISEGNO PARABOLA
curve( func,
from = min,
to = max,
main = "Parabola",
ylab = "y",
xlab = "x",
type = "l",
col = "black"
)
# DISEGNO VERTICE
points( Vx, Vy,
type = "p",
col = "red",
pch = 21,
bg = "red",
ylim = c(min, max)
)
# DISEGNO FUOCO
points( Fx, Fy,
type = "p",
col = "green",
pch = 21,
bg = "green"
)
# DISEGNO DIRETTRICE
abline( h = dir,
col = "blue"
)
# DISEGNO ASSE DI SIMMETRIA
abline( v = Vx,
col = "orange"
)
# AGGIUNGO LEGENDA
legend(
"topright",
legend=c("Parabola" , "Vertice" , "Fuoco" , "Direttrice", "Asse"),
col=c("black", "red", "green", "blue", "orange"),
lty = 1:2,
cex=0.8
)
print(a);
print(dir);
print(paste0("- Equazione: y = ", a, "x^2 + ", b, "x + ", c));
print(paste0("- Equazione: y = ", as.fractions(a), "x^2 + ", b, "x + ", c));
if( D == 0 ){
print("> Parabola non rappresentabile - sistema impossibile")
}else{
Da = ( Ay * Bx ) + ( Ax * Cy ) + ( By * Cx ) - ( Ay * Cx ) - ( Ax * By ) - ( Bx * Cy );
Db = ( Ax^2 * By ) + ( Ay * Cx^2 ) + ( Bx^2 * Cy ) - ( Ax^2 * Cy ) - ( Ay * Bx^2 ) - ( By * Cx^2 );
Dc = ( Ax^2 * Bx * Cy ) + ( Ax * Cx^2 * By ) + ( Bx^2 * Cx * Ay ) - ( Ax^2 * Cx * By ) - ( Ax * Bx^2 * Cy ) - ( Bx * Cx^2 * Ay );
a = Da / D;
b = Db / D;
c = Dc / D;
if( a == 0 ){
print("> Il fattore 'a' risulta 0 - l'equazione delinea una retta");
}
delta = b * b - 4 * a * c;
# COORDINATE VERTICE
Vx = -1 * ( b / (2 * a));
Vy = -1 * ( delta / (4 * a));
# COORDINATE FUOCO
Fx = Vx;
Fy = ( 1 - delta ) / ( 4 * a );
# Y DIRETTRICE
dir = -1 * (( 1 + delta ) / ( 4 * a ));
# PLOT
func = function(x) {a*x*x + b*x + c};
# DISEGNO PARABOLA
curve( func,
from = min,
to = max,
main = "Parabola",
ylab = "y",
xlab = "x",
type = "l",
col = "black"
)
# DISEGNO VERTICE
points( Vx, Vy,
type = "p",
col = "red",
pch = 21,
bg = "red",
ylim = c(min, max)
)
# DISEGNO FUOCO
points( Fx, Fy,
type = "p",
col = "green",
pch = 21,
bg = "green"
)
# DISEGNO DIRETTRICE
abline( h = dir,
col = "blue"
)
# DISEGNO ASSE DI SIMMETRIA
abline( v = Vx,
col = "orange"
)
# AGGIUNGO LEGENDA
legend(
"topright",
legend=c("Parabola" , "Vertice" , "Fuoco" , "Direttrice", "Asse"),
col=c("black", "red", "green", "blue", "orange"),
lty = 1:2,
cex=0.8
)
print(paste0("- Equazione: y = ", as.fractions(a), "x^2 + ", b, "x + ", c));
}
?fractions
??fractions
print(paste0("- Equazione: y = ", fractions(a), "x^2 + ", b, "x + ", c));
library(MASS)
print(paste0("- Equazione: y = ", fractions(a), "x^2 + ", b, "x + ", c));
print(paste0("- Equazione: y = ", fractions(a), "x^2 + ", fractions(b), "x + ", fractions(c)));
print(paste0("A(", fractions(Ax), ";", fractions(Ay), ")");
}
print(paste0("A(", fractions(Ax), ";", fractions(Ay), ")"));
print(paste0("A(", fractions(Ax), ";", fractions(Ay), ")"));
print(paste0("B(", fractions(Bx), ";", fractions(By), ")"));
print(paste0("C(", fractions(Cx), ";", fractions(Cy), ")"));
print(paste0("Equazione direttrice: y = ", fractions(dir));
}
print(paste0("Equazione direttrice: y = ", fractions(dir)));
print(paste0("Equazione asse di simmetria: x = ", fractions(Vx)));
print(paste0("Vertice: V(", fractions(Vx), ";", fractions(Vy), ")"));
print(paste0("Fuoco: F(", fractions(Fx), ";", fractions(Fy), ")"));
source('C:/Users/Alessandro/Desktop/Software/Coding/Projects/R/Parables/Parables.R', echo=TRUE)
print("> Inserisci le coordinate dei 3 punti: ");
curve( func,
from = initSpeed,
to = cap,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
func = function(x) {initSpeed * x};
curve( func,
from = 1,
to = cap,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
curve( func,
from = 1,
to = 1.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
library(MASS)
options(digits=5)
initSpeed = 4;
mult = 1.5;
cap = initSpeed * mult;
func = function(x) {initSpeed * x};
curve( func,
from = 1,
to = 1.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
library(MASS)
options(digits=5)
initSpeed = 4;
mult = 1.5;
cap = initSpeed * mult;
func = function(x) {initSpeed * x^2};
curve( func,
from = 1,
to = 1.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
func = function(x) {initSpeed * 3x^2};
options(digits=5)
initSpeed = 4;
mult = 1.5;
cap = initSpeed * mult;
func = function(x) {initSpeed * 3x^2};
curve( func,
from = 1,
to = 1.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
library(MASS)
options(digits=5)
initSpeed = 4;
mult = 1.5;
cap = initSpeed * mult;
func = function(x) {initSpeed * 3*x^2};
curve( func,
from = 1,
to = 1.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
library(MASS)
options(digits=5)
initSpeed = 4;
mult = 1.5;
cap = initSpeed * mult;
func = function(x) {initSpeed * x^2 - 2*x};
curve( func,
from = 1,
to = 1.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
mult = 2.5;
options(digits=5)
initSpeed = 4;
mult = 2.5;
cap = initSpeed * mult;
func = function(x) {initSpeed * x^2 - 2*x};
curve( func,
from = 1,
to = 1.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
library(MASS)
options(digits=5)
initSpeed = 4;
mult = 2.5;
cap = initSpeed * mult;
func = function(x) {initSpeed * x^2 - 2*x};
curve( func,
from = 1,
to = 1.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
curve( func,
from = 1,
to = 2.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
library(MASS)
options(digits=5)
initSpeed = 4;
mult = 1.5;
cap = initSpeed * mult;
func = function(x) {initSpeed * x^2 - 2*x};
curve( func,
from = 1,
to = 2.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
mult = 1.5;
cap = initSpeed * mult;
func = function(x) {initSpeed * x^2 - 2*x};
curve( func,
from = 2,
to = 2.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
curve( func,
from = 1,
to = 1.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
initSpeed = 4;
mult = 1.5;
cap = initSpeed * mult;
func = function(x) {initSpeed * x^2 - x};
curve( func,
from = 1,
to = 1.5,
main = "Curve",
ylab = "speed",
xlab = "time",
type = "l",
col = "black"
)
Fy = ( 1 - delta ) / ( 4 * a );
# Y DIRETTRICE
dir = -1 * (( 1 + delta ) / ( 4 * a ));
func = function(x) {a*x*x + b*x + c};
# DISEGNO PARABOLA
curve( func,
from = min,
to = max,
main = "Parabola",
ylab = "y",
xlab = "x",
type = "l",
col = "black"
)
# DISEGNO VERTICE
points( Vx, Vy,
type = "p",
col = "red",
pch = 21,
bg = "red",
ylim = c(min, max)
)
# DISEGNO VERTICE
points( Vx, Vy,
type = "p",
col = "red",
pch = 21,
bg = "red",
ylim = c(min, max)
)
# DISEGNO VERTICE
points( Vx, Vy,
type = "p",
col = "red",
pch = 21,
bg = "red",
ylim = c(min, max)
)
# DISEGNO VERTICE
points( Vx, Vy,
type = "p",
col = "red",
pch = 21,
bg = "red",
ylim = c(min, max)
)
# DISEGNO VERTICE
points( Vx, Vy,
type = "p",
col = "red",
pch = 21,
bg = "red",
ylim = c(min, max)
)
# DISEGNO VERTICE
points( Vx, Vy,
type = "p",
col = "red",
pch = 21,
bg = "red",
ylim = c(min, max)
)
source('C:/Users/Alessandro/Desktop/Software/Coding/Projects/R/Parables/Parables.R', echo=TRUE)
source('C:/Users/Alessandro/Desktop/Software/Coding/Projects/R/Parables/Parables.R', echo=TRUE)
